"""relations_models

Revision ID: 0006_relations_models
Revises: 0005_seed_future_stages_matches
Create Date: 2025-10-05 20:13:05.394585

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0006_relations_models'
down_revision: Union[str, Sequence[str], None] = '0005_seed_future_stages_matches'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_bets_user_id_match_id'), table_name='bets')
    op.drop_table('bets')
    op.drop_index(op.f('ix_matches_kickoff_at'), table_name='matches')
    op.drop_index(op.f('ix_matches_stage_id'), table_name='matches')
    op.drop_table('matches')
    op.drop_table('stages')
    op.drop_index(op.f('ix_teams_name'), table_name='teams')
    op.drop_table('teams')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('phone', name='users_phone_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('teams',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('teams_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('logo_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('stadium_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('history', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='teams_pkey'),
    sa.UniqueConstraint('name', name='teams_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_teams_name'), 'teams', ['name'], unique=False)
    op.create_table('stages',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('stages_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='stages_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('matches',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('matches_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('home_team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('away_team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stage_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('kickoff_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('place', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('home_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('away_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['away_team_id'], ['teams.id'], name='matches_away_team_id_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['home_team_id'], ['teams.id'], name='matches_home_team_id_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['stage_id'], ['stages.id'], name='matches_stage_id_fkey', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='matches_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_matches_stage_id'), 'matches', ['stage_id'], unique=False)
    op.create_index(op.f('ix_matches_kickoff_at'), 'matches', ['kickoff_at'], unique=False)
    op.create_table('bets',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('match_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('home_score_prediction', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('away_score_prediction', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('points_awarded', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], name=op.f('bets_match_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('bets_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('bets_pkey')),
    sa.UniqueConstraint('user_id', 'match_id', name=op.f('bets_user_id_match_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_bets_user_id_match_id'), 'bets', ['user_id', 'match_id'], unique=True)
    # ### end Alembic commands ###
